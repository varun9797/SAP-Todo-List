# CI/CD build for Angular application with strict quality checks
FROM node:20-alpine AS base

# Build arguments for controlling quality checks
ARG SKIP_TESTS=false
ARG SKIP_LINT=false
ARG SKIP_TYPE_CHECK=false
ARG FAIL_ON_WARNINGS=true

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Quality checks stage (CI/CD - strict)
FROM base AS quality-checks-ci

# Install Chrome for testing (required for Karma)
RUN apk add --no-cache \
    ca-certificates \
    chromium \
    freetype \
    freetype-dev \
    harfbuzz \
    nss \
    ttf-freefont

# Set Chrome binary path for Karma
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV DISPLAY=:99

# Copy build arguments
ARG SKIP_TESTS
ARG SKIP_LINT
ARG SKIP_TYPE_CHECK
ARG FAIL_ON_WARNINGS

# Run TypeScript type checking
RUN if [ "$SKIP_TYPE_CHECK" != "true" ]; then \
        echo "üîç Running TypeScript type checking..." && \
        npx tsc --noEmit || \
        (echo "‚ùå TypeScript compilation failed!" && exit 1); \
    else \
        echo "‚è≠Ô∏è Skipping TypeScript type checking"; \
    fi

# Run ESLint
RUN if [ "$SKIP_LINT" != "true" ]; then \
        echo "üîç Running ESLint..." && \
        npm run lint || \
        (echo "‚ùå ESLint checks failed!" && exit 1); \
    else \
        echo "‚è≠Ô∏è Skipping ESLint"; \
    fi

# Run tests
RUN if [ "$SKIP_TESTS" != "true" ]; then \
        echo "üîç Running tests..." && \
        npm run test -- --watch=false --browsers=ChromeHeadlessNoSandbox || \
        (echo "‚ùå Tests failed!" && exit 1); \
    else \
        echo "‚è≠Ô∏è Skipping tests"; \
    fi

# Builder stage
FROM base AS builder

# Copy quality check results (validation that quality checks passed)
COPY --from=quality-checks-ci /app/package.json /tmp/quality-passed

# Build the application for production
RUN echo "üèóÔ∏è Building Angular application for CI/CD..." && \
    npm run build

# Production stage with Nginx
FROM nginx:alpine

# Copy built application from builder stage
# Angular 20 with new builder outputs to dist/<project-name>/browser
COPY --from=builder /app/dist/frontend/browser /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create nginx.conf that doesn't specify user (for non-root execution)
RUN echo 'events { worker_connections 1024; }' > /etc/nginx/nginx.conf && \
    echo 'http {' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
    echo '    default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
    echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
    echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/conf.d/*.conf;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    mkdir -p /var/cache/nginx/fastcgi_temp && \
    mkdir -p /var/cache/nginx/uwsgi_temp && \
    mkdir -p /var/cache/nginx/scgi_temp && \
    mkdir -p /tmp/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /tmp/nginx && \
    chmod -R 755 /var/cache/nginx && \
    chmod -R 755 /tmp/nginx

# Switch to nginx user
USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Start Nginx with custom PID file location
CMD ["nginx", "-g", "daemon off; pid /tmp/nginx/nginx.pid;"]
